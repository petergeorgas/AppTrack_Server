// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Application struct {
	ID          string  `json:"id"`
	Company     string  `json:"company"`
	Role        string  `json:"role"`
	Status      Status  `json:"status"`
	Location    *string `json:"location"`
	DateApplied *string `json:"dateApplied"`
	DateUpdated *string `json:"dateUpdated"`
	Notes       *string `json:"notes"`
}

type ApplicationInput struct {
	Company     *string `json:"company"`
	Role        *string `json:"role"`
	Status      *Status `json:"status"`
	Location    *string `json:"location"`
	DateApplied *string `json:"dateApplied"`
	Notes       *string `json:"notes"`
}

type User struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type UserInput struct {
	Email string `json:"email"`
}

type Status string

const (
	StatusApply  Status = "APPLY"
	StatusReject Status = "REJECT"
	StatusOa     Status = "OA"
	StatusPhone  Status = "PHONE"
	StatusFinal  Status = "FINAL"
	StatusOnsite Status = "ONSITE"
	StatusOffer  Status = "OFFER"
)

var AllStatus = []Status{
	StatusApply,
	StatusReject,
	StatusOa,
	StatusPhone,
	StatusFinal,
	StatusOnsite,
	StatusOffer,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusApply, StatusReject, StatusOa, StatusPhone, StatusFinal, StatusOnsite, StatusOffer:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
